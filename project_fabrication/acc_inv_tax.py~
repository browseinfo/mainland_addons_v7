
from openerp.osv import fields, osv
from openerp.tools.translate import _
import openerp.addons.decimal_precision as dp

class account_invoice(osv.osv):
    _inherit = 'account.invoice'


    def _amount_tax_total(self, cr, uid, ids, field_name, arg, context=None):  
    	""" This method is used to show the tax amount by untaxed amount"""
    	if context is None:
    		context = {}
    	if not ids:
    		ids = self.search(cr, uid, [])
    	res = {}.fromkeys(ids, 0.0)
    	if not ids:
    		return res
    	cur_obj = self.pool.get('res.currency')
    	ret = {}
    	for inv in self.browse(cr, uid, ids, context=context):
    		tax_amt = tax_rate = 0.0
    		cur = inv.currency_id
    		tax_rate = inv.tax_id.amount
    		ret[inv.id] = 0.0
    		if inv.amount_untaxed and tax_rate:
    			tax_amt = inv.amount_untaxed * tax_rate
    			ret[inv.id]= cur_obj.round(cr, uid, cur, tax_amt)
    	return ret

    def _amount_sub_total(self, cr, uid, ids, field_name, arg, context=None):  
        """ This method is used to show the subtotal by subtract tax amount from untaxed amount"""
        if context is None:
            context = {}
        if not ids:
            ids = self.search(cr, uid, [])
        res = {}.fromkeys(ids, 0.0)
        if not ids:
            return res
        cur_obj = self.pool.get('res.currency')
        ret = {}
        for inv in self.browse(cr, uid, ids, context=context):
            sub = 0.0
            cur = inv.currency_id
            ret[inv.id] = 0.0
            if inv.amount_untaxed and inv.amount:
                sub = inv.amount_untaxed - inv.amount
                ret[inv.id]= cur_obj.round(cr, uid, cur, sub)
        return ret

    def _get_invoice_line(self, cr, uid, ids, context=None):
        result = {}
        for line in self.pool.get('account.invoice.line').browse(cr, uid, ids, context=context):
            result[line.invoice_id.id] = True
        return result.keys()

    def _get_invoice_tax(self, cr, uid, ids, context=None):
        result = {}
        for tax in self.pool.get('account.invoice.tax').browse(cr, uid, ids, context=context):
            result[tax.invoice_id.id] = True
        return result.keys()

    def _amount_all(self, cr, uid, ids, name, args, context=None):
        res = {}
        for invoice in self.browse(cr, uid, ids, context=context):
            res[invoice.id] = {
                'amount_untaxed': 0.0,
                'amount_tax': 0.0,
                'amount_total': 0.0,
                'amount':0.0
            }
            res[invoice.id]['amount'] = invoice.amount
            for line in invoice.invoice_line:
                res[invoice.id]['amount_untaxed'] += line.price_subtotal
            for line in invoice.tax_line:
                res[invoice.id]['amount_tax'] += line.amount
            res[invoice.id]['amount_total'] = res[invoice.id]['amount_tax'] + res[invoice.id]['amount_untaxed']
            if res[invoice.id]['amount_total'] and res[invoice.id]['amount']:
                res[invoice.id]['amount_total'] = res[invoice.id]['amount_total'] - res[invoice.id]['amount']
        return res

    def _fill_tax_line(self, cr, uid, ids, name, args, context=None):

        cur_obj = self.pool.get('res.currency')
        tax_line_obj = self.pool.get('account.invoice.tax')
        taxes = []
        invoice_lines = []
        for inv in self.browse(cr, uid, ids, context=context):
            if inv.tax_id:
                tax_line = {
                    'name': inv.tax_id.name or '',
                    'account_id' : inv.tax_id.account_collected_id.id,
                    'base' : inv.amount_untaxed,
                    'amount' : inv.amount,
                    'invoice_id': inv.id,
                }
                print "tax_line============",tax_line
            res = tax_line_obj.create( cr, uid, tax_line, context = context)
            print "RES", res
            return res
        
        
        
    _columns = {
        'tax_id': fields.many2one('account.tax', 'Tax Name'),
        'amount': fields.function(_amount_tax_total, type='float', digits_compute=dp.get_precision('Account'), string='Tax Amount', readonly=True),
        'subtotal': fields.function(_amount_sub_total, type='float', digits_compute=dp.get_precision('Account'), string='Sub Total', readonly=True),
        'amount_untaxed': fields.function(_amount_all, digits_compute=dp.get_precision('Account'), string='Subtotal', track_visibility='always',
            store={
                'account.invoice': (lambda self, cr, uid, ids, c={}: ids, ['invoice_line'], 20),
                'account.invoice.tax': (_get_invoice_tax, None, 20),
                'account.invoice.line': (_get_invoice_line, ['price_unit','invoice_line_tax_id','quantity','discount','invoice_id'], 20),
            },
            multi='all'),
        'amount_tax': fields.function(_amount_all, digits_compute=dp.get_precision('Account'), string='Tax',
            store={
                'account.invoice': (lambda self, cr, uid, ids, c={}: ids, ['invoice_line'], 20),
                'account.invoice.tax': (_get_invoice_tax, None, 20),
                'account.invoice.line': (_get_invoice_line, ['price_unit','invoice_line_tax_id','quantity','discount','invoice_id'], 20),
            },
            multi='all'),
        'amount_total': fields.function(_amount_all, digits_compute=dp.get_precision('Account'), string='Total',
            store={
                'account.invoice': (lambda self, cr, uid, ids, c={}: ids, ['invoice_line'], 20),
                'account.invoice.tax': (_get_invoice_tax, None, 20),
                'account.invoice.line': (_get_invoice_line, ['price_unit','invoice_line_tax_id','quantity','discount','invoice_id'], 20),
            },
            multi='all'),
        'tax_line_fill': fields.function(_fill_tax_line, type='float', digits_compute=dp.get_precision('Account'), string='TAX LINE', readonly=True),
    }

# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:
