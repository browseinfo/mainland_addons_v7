# -*- coding: utf-8 -*-
##############################################################################
#
#    OpenERP, Open Source Management Solution
#    Copyright (C) 2004-2010 Tiny SPRL (<http://tiny.be>).
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################

from openerp.osv import osv, fields
from twisted.application.strports import _DEFAULT
import openerp.addons.decimal_precision as dp

#class sale_order(osv.osv):
#    _inherit = 'sale.order'


#    _columns = {
#        'fabrication': fields.selection([('without_fabrication_labour', 'Without Fabrication Labour'), ('with_fabrication_labour', 'With Fabrication Labour')], 'Fabrication'),
#        'fabrication_cost': fields.float('Fabrication Cost'),
#        'installation': fields.selection([('without_installation', 'Without Installation'), ('with_installation', 'With Installation')], 'Installation'),
#        'installation_cost': fields.float('Installation Cost'),
#    }
#    _defaults = {
#        'fabrication': lambda *args: 'without_fabrication_labour',
#        'installation': lambda *args: 'without_installation',
#    }
class sale_order_line(osv.osv):

    def _amount_line(self, cr, uid, ids, field_name, arg, context=None):
        print "idssssssss ::> ",ids
        tax_obj = self.pool.get('account.tax')
        cur_obj = self.pool.get('res.currency')
        res = {}
        if context is None:
            context = {}
        for line in self.browse(cr, uid, ids, context=context):
            price = line.price_unit * (1 - (line.discount or 0.0) / 100.0)
            price = price + line.fabrication_cost + line.installation_cost
            taxes = tax_obj.compute_all(cr, uid, line.tax_id, price, line.product_uom_qty, line.product_id, line.order_id.partner_id)
            cur = line.order_id.pricelist_id.currency_id
            res[line.id] = cur_obj.round(cr, uid, cur, taxes['total'])
        return res
    _inherit = 'sale.order.line'
    _columns = {

        'fabrication': fields.selection([('without_fabrication_labour', 'Without Fabrication Labour'), ('with_fabrication_labour', 'With Fabrication Labour')], 'Fabrication'),
        'fabrication_cost': fields.float('Fabrication Cost'),
        'installation': fields.selection([('without_installation', 'Without Installation'), ('with_installation', 'With Installation')], 'Installation'),
        'installation_cost': fields.float('Installation Cost'),
        'price_subtotal': fields.function(_amount_line, string='Subtotal', digits_compute= dp.get_precision('Account')), 
    }
    _defaults = {
        'fabrication': lambda *args: 'without_fabrication_labour',
        'installation': lambda *args: 'without_installation',
    }

# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:
